
    vertOrHori = () {
        let rand_num = 0;
        rand_num = Math.floor(Math.random()*100) + 1;
        if(rand_num <= 50){
            this.setState{
                vert: 1
            }
        }
        else{
            this.setState{
                hori: 1
            }
        }
    }
    
    
    
    updateFormationB = () => {
        this.vertOrHori();
        if(this.state.vert == 1){
            
        }
    }

  for(i = 1; i <= fleetB[1] - 1; i++){
      if(arr[r][c - i] == ''){
          this.state.west++
      }
  }

When a function is put as async, when I call it and want to wait for it to finish befre continuing, i must put await 
when I call the function






    countFreeSpace = (row , col ,  max_num , storage_B_copy) => {
        let count_num = [0 , 0, 0 , 0]
        let temp_col = 0;
        let temp_row = 0;
        let count = 1;
        let directions_arr = [ 
            [-1 , 0] , [1 , 0] , [0 , 1] , [0 , -1]
        ]
        let dir_count = 0;

        for(let i = 0; i < 4; i++){
            while((col >= 0) && (col <= 11) && (row >= 6) && (row <= 11)){
                temp_col = col;
                temp_row = row;
                col = col + directions_arr[i][0]
                row = row + directions_arr[i][1]
                if(storage_B_copy[row][col] == ''){
                    count++;
                    if(count == max_num){
                        count_num[i] = count;
                    }
                }
                else{
                    break;
                }
            }
        }
        for(let j = 0; j < count_num.length; j++){
            if(count_num[j] == max_num){
                dir_count++
            }
        }
        if(dir_count >= 1){
            this.setState({
                eligible_dir: dir_count,
                is_eligible: 1
            })
        }
        this.setState({
            dir_check: count_num
        })
    }



    if (this.state.playerA_turn == 1) {
      if (row >= 0 && row <= 5) {
        alert("Oopsies, please do not commit fratricide");
      } else if (
        this.state.battlefield[row][col] == "X" ||
        this.state.battlefield[row][col] == "O" //Maybe change to battlefield mirror to show player A side
      ) {
        alert("Don't waste your ammuniation unnecessarily!");
      } else {
        if (this.state.storage_B[row][col] == "") {
          this.state.battlefield[row][col] = "O";
          alert("You missed!");
        } else if (this.state.storage_B[row][col] == "C") {
          this.state.battlefield[row][col] = "X";
          this.setState({
            carrierB: this.state.carrierB - 1,
            successfulHitsA: this.state.successfulHitsA + 1,
          });
          alert("You have hit a part of a carrier, Wow!");
          if (this.state.carrierB == 0) {
            alert("Player B carrier is sunk!");
          }
        } else if (this.state.storage_B[row][col] == "B") {
          this.state.battlefield[row][col] = "X";
          this.setState({
            battleshipB: this.state.battleshipB - 1,
            successfulHitsA: this.state.successfulHitsA + 1,
          });
          alert("You have hit a part of a battleship, Wow!");
          if (this.state.battleshipB == 0) {
            alert("Player B battleship is sunk!");
          }
        } else if (this.state.storage_B[row][col] == "c") {
          this.state.battlefield[row][col] = "X";
          this.setState({
            cruiserB: this.state.cruiserB - 1,
            successfulHitsA: this.state.successfulHitsA + 1,
          });
          alert("You have hit a part of a crusier, Wow!");
          if (this.state.cruiserB == 0) {
            alert("Player B cruiser is sunk!");
          }
        } else if (this.state.storage_B[row][col] == "S") {
          this.state.battlefield[row][col] = "X";
          this.setState({
            submarineB: this.state.submarineB - 1,
            successfulHitsA: this.state.successfulHitsA + 1,
          });
          alert("You have hit a part of a submarine, Wow!");
          if (this.state.submarineB == 0) {
            alert("Player B submarine is sunk!");
          }
        } else if (this.state.storage_B[row][col] == "D") {
          this.state.battlefield[row][col] = "X";
          this.setState({
            destroyerB: this.state.destroyerB - 1,
            successfulHitsA: this.state.successfulHitsA + 1,
          });
          alert("You have hit a part of a destroyer, Wow!");
          if (this.state.destroyerB == 0) {
            alert("Player B destroyer is sunk!");
          }
        } else {
          return;
        }
        alert("Player B turn");
        await this.setState({
          playerA_turn: 0,
          playerB_turn: 1,
        });
        setTimeout(()=>{
            this.gamePlay();
        }, 1000);
      }
    } 
    else{
      if (this.state.playerB_turn == 1) {
        // I create two clones: bfield_clone , one storageb clone 
        let ship = ''
        let modifySuccessfulHits = async (change) => {
            await this.setState({
              successfulHitsB: this.state.successfulHitsB + change
            })
        }

        let modifyFieldArray = async (row , col , symbol) => {
          let B_field_copy = [...this.state.battlefield]
          B_field_copy[row][col] = symbol
          await this.setState({
             battlefield: B_field_copy

          })
        }
        if(this.state.AI_diff == 'weak'){
          ship = await runWeakAi(this.state.storage_A, modifySuccessfulHits , modifyFieldArray , this.state.battlefield)
          this.setState({
            AI_picked: 1
          })
        } 
        else if(this.state.AI_diff == 'strong'){
          ship = await runMediumAi(this.state.storage_A , modifySuccessfulHits , modifyFieldArray , this.state.battlefield)
          this.setState({
            AI_picked: 1
          })
        } 
        else{
          alert("Please pick an AI difficulty!")
        }
        

        if(ship == 'C'){
          await this.setState({
            carrierA: this.state.carrierA - 1
          })
        }
        else if(ship == 'B'){
          await this.setState({
            battleshipA: this.state.battleshipA - 1
          })
        }
        else if(ship == 'c'){
          await this.setState({
            cruiserA: this.state.cruiserA - 1
          })
        }
        else if(ship == 'S'){
          await this.setState({
            submarineA: this.state.submarineA - 1
          })
        }
        else if(ship == 'D'){
          await this.setState({
            destroyerA: this.state.destroyerA - 1
          })
        }
  

        if(this.state.carrierA == 0 && ship == 'C'){
          alert("Player A carrier is sunk!")
        }
        else if(this.state.battleshipA === 0 && ship == 'B'){
          alert("Player A battleship is sunk!")
        }
        else if(this.state.cruiserA === 0 && ship == 'c'){
          alert("Player A cruiser is sunk!")
        }
        else if(this.state.submarineA === 0 && ship == 'S'){
          alert("Player A submarine is sunk!")
        }
        else if(this.state.destroyerA === 0 && ship == 'D'){
          alert("Player A destroyer is sunk!")
        }


        alert("Player A turn");

        this.setState({
          playerA_turn: 1,
          playerB_turn: 0,
        });
      }
    }
  <label class="container">One
  <input type="radio" checked="checked" name="radio">
  <span class="checkmark"></span>
</label>